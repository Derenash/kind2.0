BBT.balance
: ∀(K: *)
  ∀(V: *)
  ∀(cmp: ∀(a: K) ∀(b: K) Cmp)
  ∀(set_key: K)
  ∀(node_key: K)
  ∀(val: V)
  ∀(lft: (BBT K V))
  ∀(rgt: (BBT K V))
  (BBT K V)
= λK λV λcmp λset_key λnode_key λval λlft λrgt
  let P = λx (BBT K V)
  let new = λlft.size λlft
    let P = λx (BBT K V)
    let new = λrgt.size λrgt
      let new_size = #(+ #1 (U60.max lft.size rgt.size))
      let balance = (U60.abs_diff lft.size rgt.size)
      let P = λx
        ∀(new_size: #U60)
        ∀(node_key: K)
        ∀(val: V)
        ∀(lft: (BBT K V))
        ∀(rgt: (BBT K V))
        (BBT K V)
      let true = λnew_size λnode_key λval λlft λrgt
        let P = λx
          ∀(K: *)
          ∀(V: *)
          ∀(cmp: ∀(a: K) ∀(b: K) Cmp)
          ∀(new_size: #U60)
          ∀(node_key: K)
          ∀(set_key: K)
          ∀(val: V)
          ∀(lft: (BBT K V))
          ∀(rgt: (BBT K V))
          (BBT K V)
        let true = BBT.balance.lft_heavier
        let false = BBT.balance.rgt_heavier
        (~(U60.to_bool #(< rgt.size lft.size))
          P
          true
          false
          K
          V
          cmp
          new_size
          node_key
          set_key
          val
          lft
          rgt
        )
      let false = λnew_size λnode_key λval λlft λrgt
        (BBT.bin K V new_size node_key val lft rgt)
      (~(U60.to_bool #(> balance #1))
        P
        true
        false
        new_size
        node_key
        val
        lft
        rgt
      )
    (~(BBT.got_size K V rgt) P new)
  (~(BBT.got_size K V lft) P new)