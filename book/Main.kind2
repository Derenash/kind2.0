Main = Kind.Term.parser
//Main = Kind.Scope.find

//Main
//: String
//= let OPT  = (List.cons (Parser String))
  //let END  = (List.nil (Parser String))
  //let CON  = String.concat
  //let NIL  = String.nil
  //let P    = λx(String)
  //let done = λcode λvalue (CON "done: " (CON value (CON " ## left: " code)))
  //let fail = λcode λerror (CON "fail: " code)
  //let opts =
    //(OPT (Parser.bind Unit String (Parser.text "abathur") λx
         //(Parser.pure String "parsed_0"))
    //(OPT (Parser.bind Unit String (Parser.text "farinha") λx
         //(Parser.pure String "parsed_1"))
    //(OPT (Parser.bind Unit String (Parser.text "alpiste") λx
         //(Parser.pure String "parsed_2"))
    //END))) 
  //let text = "alpiste medula oblongata"
  //(~(Parser.options String opts text) P done fail)

//Main
//: String
//= let P    = λx(String)
  //let done = λcode λvalue (String.concat "done: ##" code)
  //let fail = λcode λerror (String.concat "fail: ##" code)
  //(~(Parser.text "foodtX" "foodtruck") P done fail)

//Main
//: String
//= let P   = λx(String)
  //let new = λcode λword word
  //(~(Parser.word Char.is_name "foo bar tic tac") P new)

//Main
//: Bool
//= (Char.is_name 'D')

//Main
//: String
//= (String.cons 'a' String.nil)

//Main
//: String
//= let str = "    foo bar"
  //(String.skip str)

//Main
//: (Maybe #U60)
//= let list =
    //(List.cons #U60 #10
    //(List.cons #U60 #20
    //(List.cons #U60 #30
    //(List.cons #U60 #40
    //(List.cons #U60 #50
    //(List.nil #U60))))))
  //(List.find #U60 (U60.equal #30) list)

//Main
//: Bool
//= (String.equal "abcd" "abcd")

//Main
//: String
//= (U60.name #703)

//Main
//: String
//= #match x = #2 {
  //#0: "0"
  //#+: #match y = x-1 {
    //#0: "1"
    //#+: ">"
  //}: String
//}: String
