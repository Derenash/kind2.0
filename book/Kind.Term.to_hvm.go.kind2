Kind.Term.to_hvm.go
: ∀(term: Kind.Term)
  ∀(dep: Nat)
  String.Concatenator
= λterm λdep
  let P   = λx String.Concatenator
  let all = λnam λinp λbod
    (Kind.Text.show.go "0")
  let lam = λnam λbod λnil
    ((Kind.Text.show.go "λ")
    ((Kind.Text.show.go (U60.name (U60.from_nat dep)))
    ((Kind.Text.show.go " "
    ((Kind.Term.to_hvm.go (bod (Kind.var nam dep)) (Nat.succ dep))
    nil)))))
  let app = λfun λarg λnil
    ((Kind.Text.show.go "(")
    ((Kind.Term.to_hvm.go fun dep)
    ((Kind.Text.show.go " ")
    ((Kind.Term.to_hvm.go arg dep)
    ((Kind.Text.show.go ")")
    nil)))))
  let ann = λval λtyp
    (Kind.Term.to_hvm.go val dep)
  let slf = λnam λbod
    (Kind.Text.show.go "0")
  let ins = λval
    (Kind.Term.to_hvm.go val dep)
  let ref = λnam λval
    (Kind.Text.show.go nam)
  let def = λnam λval λbod λnil
    ((Kind.Text.show.go "let ")
    ((Kind.Text.show.go nam)
    ((Kind.Text.show.go " = ")
    ((Kind.Term.to_hvm.go val dep)
    ((Kind.Text.show.go "; ")
    ((Kind.Term.to_hvm.go (bod (Kind.var nam dep)) (Nat.succ dep))
    nil))))))
  let set =
    (Kind.Text.show.go "0")
  let u60 =
    (Kind.Text.show.go "0")
  let num = λval
    (U60.show.go val)
  let op2 = λopr λfst λsnd λnil
    ((Kind.Text.show.go "(")
    ((Kind.Oper.show.go opr) // TODO: Kind.Oper.to_hvm
    ((Kind.Text.show.go " ")
    ((Kind.Term.to_hvm.go fst dep)
    ((Kind.Text.show.go " ")
    ((Kind.Term.to_hvm.go snd dep)
    ((Kind.Text.show.go ")")
    nil)))))))
  let mat = λnam λx λz λs λp λnil
    ((Kind.Text.show.go "(U60.match ")
    ((Kind.Term.to_hvm.go x dep)
    ((Kind.Text.show.go " ")
    ((Kind.Term.to_hvm.go z dep)
    ((Kind.Text.show.go " ")
    ((Kind.Term.to_hvm.go (s (Kind.var (String.concat nam "_1") dep)) (Nat.succ dep))
    ((Kind.Text.show.go " ")
    ((Kind.Term.to_hvm.go (p (Kind.var nam dep)) (Nat.succ dep))
    ((Kind.Text.show.go ")")
    nil)))))))))
  let txt = λtxt λnil
    ((Kind.Text.show.go String.quote)
    ((Kind.Text.show.go txt)
    ((Kind.Text.show.go String.quote)
    nil)))
  let hol = λnam λctx
    (Kind.Text.show.go "0")
  let var = λnam λidx
    (Kind.Text.show.go (U60.name (U60.from_nat idx)))
  (~term P all lam app ann slf ins ref def set u60 num op2 mat txt hol var)