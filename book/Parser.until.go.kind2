Parser.until.go
: ∀(A: *)
  ∀(until: (Parser Bool))
  ∀(parse: (Parser A))
  ∀(terms: (List.Concatenator A))
  (Parser (List.Concatenator A))
= λA λuntil λparse λterms λcode
  use P = λx (Parser.Result (List.Concatenator A))
  use done = λcode λstop
    use P = λx
      ∀(code: String) (Parser.Result (List.Concatenator A))
    use true = λcode
      (Parser.Result.done (List.Concatenator A) code terms)
    use false = λcode
      use P = λx (Parser.Result (List.Concatenator A))
      use done = λcode λvalue
        (Parser.until.go
          A
          until
          parse
          λx (terms (List.cons A value x))
          code
        )
      use fail = λerror (Parser.Result.fail (List.Concatenator A) error)
      (~(parse code) P done fail)
    (~stop P true false code)
  use fail = λerror (Parser.Result.fail (List.Concatenator A) error)
  (~(until code) P done fail)